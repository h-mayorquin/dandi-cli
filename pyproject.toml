[build-system]
# Setuptools version should match setup.py; wheel because pip will insert it noisily
requires = ["setuptools >= 38.3.0", "wheel"]
build-backend = 'setuptools.build_meta'

[project]
name = "dandi"
description = "Command line client for interaction with DANDI instances"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache 2.0"}
authors = [
    {name = "DANDI developers", email = "team@dandiarchive.org"},
]
maintainers = [
    {name = "Yaroslav O. Halchenko", email = "debian@onerussian.com"},
]
keywords = []
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "bidsschematools ~= 1.0",
    "bids-validator-deno >= 2.0.5",
    # >=8.2.0: https://github.com/pallets/click/issues/2911
    "click >= 7.1, <8.2.0",
    "click-didyoumean",
    "dandischema >= 0.11.1, < 0.12.0",
    "etelemetry >= 0.2.2",
    # For pydantic to be able to use type annotations like `X | None`
    "eval_type_backport; python_version < '3.10'",
    "fasteners",
    "fscacher >= 0.3.0",
    # Workaround for no wheels for intel OSX as of 3.15
    "h5py<3.15 ; sys_platform == 'darwin' and platform_machine != 'arm64'",
    "h5py ; sys_platform != 'darwin' or platform_machine == 'arm64'",
    # 3.14.4: https://github.com/hdmf-dev/hdmf/issues/1186
    "hdmf != 3.5.0,!=3.14.4",
    "humanize",
    "interleave ~= 0.3",
    "joblib",
    "keyring != 23.9.0",
    "keyrings.alt",
    "packaging",
    "platformdirs",
    "pycryptodomex",  # for EncryptedKeyring backend in keyrings.alt
    "pydantic ~= 2.0",
    "pynwb >= 1.0.3,!=1.1.0,!=2.3.0",
    "numcodecs < 0.16",
    "nwbinspector >= 0.4.28,!=0.4.32",
    "pyout >=0.5, !=0.6.0",
    "python-dateutil",
    "requests ~= 2.20",
    "ruamel.yaml >=0.15, <1",
    "semantic-version",
    "tenacity",
    "tensorstore",
    # possibly silently incomplete downloads: https://github.com/dandi/dandi-cli/issues/1500
    "urllib3 >= 2.0.0",
    "yarl ~= 1.9",
    "zarr >= 2.10, <= 3.0.8",
    "zarr_checksum ~= 0.4.0",
]
dynamic = ["version"]

[project.optional-dependencies]
# PyNWB extensions we know and somewhat care about
# e.g. import whenever pynwb fails without them
extensions = [
    "allensdk",
    "ndx-hed",
    "ndx-events",
]
extras = [
    "duecredit >= 0.6.0",
    "fsspec[http]",
]
style = [
    "flake8",
    "pre-commit",
]
test = [
    "anys ~= 0.2",
    "coverage",
    "opencv-python",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-rerunfailures",
    "pytest-timeout",
    "responses != 0.24.0, != 0.25.5",
    "vcrpy",
]
tools = [
    "boto3",
]
all = [
    "dandi[extensions]",
    "dandi[extras]",
    "dandi[style]",
    "dandi[test]",
    "dandi[tools]",
]

[project.urls]
Homepage = "http://dandiarchive.org"
"Source Code" = "https://github.com/dandi/dandi-cli"
Documentation = "https://dandi.readthedocs.io"

[project.scripts]
dandi = "dandi.cli.command:main"

[project.entry-points.pytest11]
dandi = "dandi.pytest_plugin"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
include = ["dandi*"]
namespaces = true

[tool.black]
exclude='\.eggs|\.git|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist|_version\.py|versioneer\.py'

[tool.isort]
profile = "black"
force_sort_within_sections = true
reverse_relative = true
sort_relative_in_force_sorted_sections = true
known_first_party = ["dandi"]

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "dandi/_version.py"
versionfile_build = "dandi/_version.py"
tag_prefix = ""
parentdir_prefix = ""

[tool.flake8]
max-line-length = 100
ignore = ["E203", "W503"]
extend-exclude = [
    "_version.py",
    "versioneer.py",
]

[tool.codespell]
skip = "_version.py,due.py,versioneer.py,*.vcr.yaml,venv,venvs,pyproject.toml"
# Don't warn about "[l]ist" in the abbrev_prompt() docstring:
# TE is present in the BIDS schema
ignore-regex = "(\\[\\w\\]\\w+|TE|ignore \"bu\" strings)"
ignore-words-list = "ba,bu,fo"

[tool.mypy]
# TODO: Eventually uncomment these:
#allow_untyped_defs = False
implicit_reexport = false
allow_incomplete_defs = false
ignore_missing_imports = false
no_implicit_optional = true
local_partial_types = true
pretty = true
show_error_codes = true
show_traceback = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
plugins = ["pydantic.mypy"]
exclude = "_version\\.py|due\\.py"

[[tool.mypy.overrides]]
module = "dandi.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "dandi._version",
    "dandi.due",
]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = [
    "bidsschematools.*",
    "click_didyoumean.*",
    "etelemetry.*",
    "fasteners.*",
    "fscacher.*",
    "fsspec.*",
    "h5py.*",
    "hdmf.*",
    "joblib.*",
    "keyrings.alt.*",
    "nwbinspector.*",
    "pynwb.*",
    "pyout.*",
    "semantic_version.*",
    "vcr.*",
    "zarr.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
